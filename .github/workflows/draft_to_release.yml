name: Publish release
on:
 push :
    branches :
      - master

jobs:
  create_release:
    runs-on: ubuntu-latest
    steps:
    - name: Set GHE_HOST
      run: |
       echo "GHE_HOST=${GITHUB_SERVER_URL##https:\/\/}" >> $GITHUB_ENV

    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python env
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'

    - name: Get Draft Release Info
      id: get_draft_release_info
      run: |
        draft_info=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/${{ github.repository }}/releases" | jq -r '.[] | select(.draft == true) | .name')
        echo "::set-output name=draft_info::$draft_info"

    - name: Get Draft Release ID
      id: get_draft_id
      run: |
        draft_id=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/${{ github.repository }}/releases" | jq -r '.[] | select(.draft == true) | .id')
        echo "::set-output name=draft_id::$draft_id"
    
    - name: Publish Release
      id: publish_release
      if: steps.get_draft_release_info.outputs.draft_info != ''
      run: |
        draft_info="${{ steps.get_draft_release_info.outputs.draft_info }}"
        draft_tag=$(echo $draft_info | cut -f1)
        draft_id=$(echo $draft_info | cut -f2)

        echo "Publishing release from draft ID: $draft_id"

        curl -X PATCH -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -H "Accept: application/vnd.github.v3+json" "https://api.github.com/repos/${{ github.repository }}/releases/$draft_id" -d '{"draft": false}'


        git tag -d $draft_info  # Delete the existing local tag if it exists
        git tag $draft_info  # Create a new tag with the same name as the draft
        git push origin $draft_info  # Push the new tag to the remote repository

        release_info=$(curl -sH "Accept: application/vnd.github.v3+json" -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
        https:/https://api.github.com/repos/${{ github.repository }}/releases | \
        jq -r '.[] | select(.draft == false) | .html_url')
        echo "::set-output name=release_info::$release_info"

    - name: Extract Repository Name
    
      id: extract_repo_name
      if: steps.publish_release.outputs.release_info != ''
      run: echo "::set-output name=repo_name::$(echo ${{ steps.publish_release.outputs.release_info }} | cut -d'/' -f5)"
      
    - name: Post to a Slack channel

      id: slack
      
      if: steps.publish_release.outputs.release_info != ''
      uses: slackapi/slack-github-action@v1.25.0
    
      with:
        channel-id: 'C06HM7BUHA6' 
        
        slack-message: |
          Bi-Weekly Release: The release has been successfully published for :   ${{ steps.publish_release.outputs.repo_name }}
          Release Details: ${{ steps.publish_release.outputs.release_info }}
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

